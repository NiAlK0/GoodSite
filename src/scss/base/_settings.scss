// /*!=================-SETTINGS-=================!*/
@use "sass:math";
// Цветовые схемы тем
@mixin theme($typeTheme, $property, $rules) {
  @if $typeTheme == default {
    .theme-#{$typeTheme} & {
      #{$property}: $rules;
    }
  } @else if $typeTheme == light {
    .theme-#{$typeTheme} & {
      #{$property}: $rules;
    }
  } @else if $typeTheme == contrast {
    .theme-#{$typeTheme} & {
      #{$property}: $rules;
    }
  }
  // @include theme("default", "color", var(--base-white));
}
@mixin themeWith($typeTheme, $property, $rules) {
  @if $typeTheme == default {
    &.theme-#{$typeTheme} {
      #{$property}: $rules;
    }
  } @else if $typeTheme == light {
    &.theme-#{$typeTheme} {
      #{$property}: $rules;
    }
  } @else if $typeTheme == contrast {
    &.theme-#{$typeTheme} {
      #{$property}: $rules;
    }
  }
}
// Подключение шрифта
@mixin font($fontName, $fileName, $weight, $style) {
  @font-face {
    font-family: $fontName;
    font-display: swap;
    src: url("../fonts/#{$fileName}.woff2") format("woff2"), url("../fonts/#{$fileName}.woff") format("woff");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
// Mixin for adaptive layers for use css without mixin
// selector {
// 	property: calc(minSize+(lauoytSize-numberMin)*((100vh-320px)/(maxWidth-320)));
// 	}

// Адаптивное свойство
@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type == 1 {
    // if < container
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidthContainer - 375}));
    }
  } @else if $type == 2 {
    // if > container
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$max-width - 375}));
    }
  } @else {
    // always
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$max-width - 375}));
  }
} // @include adaptive-value("padding", 50, 20, 0);

// Сonversion to other units
// To %
@function prc($pxOne, $pxTwo) {
  $result: math.div($px, 16) * 100%;
  @return $result;
}
// To REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
// To EM
@function em($px) {
  $result: math.div($px, 16) + em;
  @return $result;
}
